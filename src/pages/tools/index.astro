---
import Layout from '~/layouts/PageLayout.astro';
import { getTools, getAllTopics, getAllOperatingSystems, getAllToolTypes, getAllLanguages } from '~/utils/database';
import ToolSearch from '~/components/tools/ToolSearch.astro';
import { Icon } from 'astro-icon/components';

// Get search parameter from URL
const searchTerm = Astro.url.searchParams.get('search') || '';

// Fetch all tools and filter options
const tools = await getTools();
const topics = await getAllTopics();
const operatingSystems = await getAllOperatingSystems();
const toolTypes = await getAllToolTypes();
const languages = await getAllLanguages();

const metadata = {
  title: 'Petrology Tools',
  description: 'Browse and search for tools used in petrology research',
};
---

<Layout metadata={metadata}>
  <section class="px-4 py-8 sm:px-6 mx-auto lg:px-8 lg:py-12 max-w-6xl">
    <div class="mb-6 md:mx-auto text-center md:mb-8 max-w-3xl">
      <h1 class="text-3xl md:text-4xl font-bold leading-tighter tracking-tighter mb-2 font-heading">
        Petrology Tools
      </h1>
      <p class="text-lg text-gray-600 dark:text-slate-400">
        Browse and search for tools used in petrology research
      </p>
    </div>

    <!-- Search and Filter Component -->
    <div class="mb-6 sticky top-0 z-10">
      <ToolSearch 
        topics={topics} 
        operatingSystems={operatingSystems} 
        toolTypes={toolTypes} 
        languages={languages}
        initialSearchTerm={searchTerm}
      />
    </div>
    
    <!-- View Toggle -->
    <div class="flex justify-end mb-4">
      <div class="inline-flex rounded-md shadow-sm" role="group">
        <button 
          type="button" 
          id="grid-view-btn"
          class="px-4 py-2 text-sm font-medium text-gray-900 bg-white border border-gray-200 rounded-l-lg hover:bg-gray-100 hover:text-blue-700 focus:z-10 focus:ring-2 focus:ring-blue-700 focus:text-blue-700 dark:bg-gray-700 dark:border-gray-600 dark:text-white dark:hover:text-white dark:hover:bg-gray-600 dark:focus:ring-blue-500 dark:focus:text-white active-view"
        >
          <svg class="w-4 h-4" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg">
            <path fill-rule="evenodd" d="M5 3a2 2 0 00-2 2v2a2 2 0 002 2h2a2 2 0 002-2V5a2 2 0 00-2-2H5zM5 11a2 2 0 00-2 2v2a2 2 0 002 2h2a2 2 0 002-2v-2a2 2 0 00-2-2H5zM11 5a2 2 0 012-2h2a2 2 0 012 2v2a2 2 0 01-2 2h-2a2 2 0 01-2-2V5zM11 13a2 2 0 012-2h2a2 2 0 012 2v2a2 2 0 01-2 2h-2a2 2 0 01-2-2v-2z" clip-rule="evenodd"></path>
          </svg>
        </button>
        <button 
          type="button" 
          id="list-view-btn"
          class="px-4 py-2 text-sm font-medium text-gray-900 bg-white border border-gray-200 rounded-r-md hover:bg-gray-100 hover:text-blue-700 focus:z-10 focus:ring-2 focus:ring-blue-700 focus:text-blue-700 dark:bg-gray-700 dark:border-gray-600 dark:text-white dark:hover:text-white dark:hover:bg-gray-600 dark:focus:ring-blue-500 dark:focus:text-white"
        >
          <svg class="w-4 h-4" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg">
            <path fill-rule="evenodd" d="M3 5a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1zM3 10a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1zM3 15a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1z" clip-rule="evenodd"></path>
          </svg>
        </button>
      </div>
    </div>

    <!-- Tools Grid -->
    <div id="tools-grid" class="grid gap-4 md:grid-cols-2 lg:grid-cols-3">
      {tools.map((tool) => (
        <div 
          class="tool-card flex flex-col border border-gray-200 dark:border-gray-700 rounded-lg overflow-hidden transition-all duration-200 hover:shadow-lg"
          data-accessibility={tool.accessibility}
        >
          <div class="p-4 flex-grow">
            <div class="flex items-center gap-2 mb-1">
              <h2 class="text-lg font-bold tool-name">{tool.name}</h2>
              {tool.operatingSystems && tool.operatingSystems.length > 0 && (
                <div class="flex items-center">
                  <span class="flex gap-1">
                    {tool.operatingSystems.map((os) => (
                      <span class="tool-os inline-block w-4 h-4" title={os.name}>
                        {os.name === 'Windows' && (
                          <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor">
                            <path d="M0 3.449L9.75 2.1v9.451H0m10.949-9.602L24 0v11.4H10.949M0 12.6h9.75v9.451L0 20.699M10.949 12.6H24V24l-12.9-1.801"/>
                          </svg>
                        )}
                        {os.name === 'Mac' && (
                          <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor">
                            <path d="M11.03 2.59a5.5 5.5 0 0 1 3.47 2.06c.43.6.76 1.3.96 2.06.73-.83 1.56-1.46 2.83-1.46 1.36 0 2.6.9 3.07 2.13.44 1.23.4 2.63-.26 3.8-.37.63-.93 1.17-1.43 1.6-.3.26-.6.5-.83.66.23.17.53.4.83.66.5.43 1.07.97 1.43 1.6.67 1.17.7 2.57.27 3.8-.47 1.23-1.71 2.13-3.07 2.13-1.27 0-2.1-.63-2.83-1.46-.2.76-.53 1.47-.97 2.06a5.5 5.5 0 0 1-3.47 2.07c-1.36 0-2.6-.9-3.06-2.13-.44-1.23-.4-2.63.26-3.8.37-.63.93-1.17 1.43-1.6.3-.26.6-.5.83-.66-.23-.17-.53-.4-.83-.66-.5-.43-1.06-.97-1.43-1.6-.67-1.17-.7-2.57-.26-3.8.46-1.23 1.7-2.13 3.06-2.13 1.27 0 2.1.63 2.83 1.46.2-.76.54-1.46.97-2.06a5.5 5.5 0 0 1 3.47-2.07m0-2.03c-1.95 0-3.73.4-5.07 1.8-1.6 1.63-1.73 3.43-1.73 5.57 0 1.1.23 2.23.93 3.1.5.63 1.17 1.13 1.77 1.53-.6.4-1.27.9-1.77 1.53-.7.87-.93 2-.93 3.1 0 2.13.13 3.93 1.73 5.57 1.34 1.4 3.12 1.8 5.07 1.8 1.95 0 3.73-.4 5.07-1.8 1.6-1.63 1.73-3.43 1.73-5.57 0-1.1-.23-2.23-.93-3.1-.5-.63-1.17-1.13-1.77-1.53.6-.4 1.27-.9 1.77-1.53.7-.87.93-2 .93-3.1 0-2.13-.13-3.93-1.73-5.57-1.34-1.4-3.12-1.8-5.07-1.8z"/>
                          </svg>
                        )}
                        {os.name === 'Linux' && (
                          <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor">
                            <path d="M12.5 0c-.81 0-1.5.68-1.5 1.5v.68c-.32.08-.64.17-.94.3l-.48-.48a1.5 1.5 0 0 0-2.12 0 1.5 1.5 0 0 0 0 2.12l.48.48a5.2 5.2 0 0 0-.3.94H6.5a1.5 1.5 0 0 0-1.5 1.5 1.5 1.5 0 0 0 1.5 1.5h.68c.08.32.17.64.3.94l-.48.48a1.5 1.5 0 0 0 0 2.12 1.5 1.5 0 0 0 2.12 0l.48-.48c.3.13.62.22.94.3v.68a1.5 1.5 0 0 0 1.5 1.5 1.5 1.5 0 0 0 1.5-1.5v-.68c.32-.08.64-.17.94-.3l.48.48a1.5 1.5 0 0 0 2.12 0 1.5 1.5 0 0 0 0-2.12l-.48-.48c.13-.3.22-.62.3-.94h.68a1.5 1.5 0 0 0 1.5-1.5 1.5 1.5 0 0 0-1.5-1.5h-.68c-.08-.32-.17-.64-.3-.94l.48-.48a1.5 1.5 0 0 0 0-2.12 1.5 1.5 0 0 0-2.12 0l-.48.48a5.2 5.2 0 0 0-.94-.3V1.5a1.5 1.5 0 0 0-1.5-1.5zM12 5a4 4 0 0 1 4 4 4 4 0 0 1-4 4 4 4 0 0 1-4-4 4 4 0 0 1 4-4z"/>
                          </svg>
                        )}
                      </span>
                    ))}
                  </span>
                </div>
              )}
            </div>
            <p class="text-sm text-gray-700 dark:text-gray-300 mb-3 line-clamp-2 tool-description">{tool.description}</p>
            
            <div class="flex flex-wrap gap-1 mb-3">
              {tool.topics && tool.topics.slice(0, 3).map((topic) => (
                <span class="tool-topic px-2 py-0.5 text-xs bg-blue-100 dark:bg-blue-900 text-blue-800 dark:text-blue-100 rounded-full">
                  {topic.term}
                </span>
              ))}
              {tool.topics && tool.topics.length > 3 && (
                <span class="px-2 py-0.5 text-xs bg-gray-100 dark:bg-gray-800 text-gray-700 dark:text-gray-300 rounded-full">
                  +{tool.topics.length - 3}
                </span>
              )}
            </div>
            
            <div class="flex flex-wrap items-center gap-3 text-sm text-gray-600 dark:text-gray-400">
              {tool.accessibility && (
                <span class="text-xs">
                  {tool.accessibility}
                </span>
              )}
              
              {tool.toolTypes && tool.toolTypes.length > 0 && (
                <span class="text-xs">
                  {tool.toolTypes.map((type, i) => (
                    <span class="tool-type">
                      {i > 0 ? ', ' : ''}{type.type}
                    </span>
                  ))}
                </span>
              )}
            </div>
          </div>
          
          <div class="p-3 bg-gray-50 dark:bg-gray-800 flex justify-between items-center">
            <a 
              href={`/tools/${tool.petrahubid}`} 
              class="text-sm px-3 py-1 bg-blue-600 hover:bg-blue-700 text-white rounded transition-colors"
            >
              Details
            </a>
          </div>
        </div>
      ))}
    </div>
    
    <!-- Tools List (hidden by default) -->
    <div id="tools-list" class="flex flex-col gap-3 hidden">
      {tools.map((tool) => (
        <div 
          class="tool-card flex border border-gray-200 dark:border-gray-700 rounded-lg overflow-hidden transition-all duration-200 hover:shadow-lg"
          data-accessibility={tool.accessibility}
        >
          <div class="p-4 flex-grow">
            <div class="flex justify-between items-start">
              <div>
                <div class="flex items-center gap-2 mb-1">
                  <h2 class="text-lg font-bold tool-name">{tool.name}</h2>
                  {tool.operatingSystems && tool.operatingSystems.length > 0 && (
                    <div class="flex items-center">
                      <span class="flex gap-1">
                        {tool.operatingSystems.map((os) => (
                          <span class="tool-os inline-block w-4 h-4" title={os.name}>
                            {os.name === 'Windows' && (
                              <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor">
                                <path d="M0 3.449L9.75 2.1v9.451H0m10.949-9.602L24 0v11.4H10.949M0 12.6h9.75v9.451L0 20.699M10.949 12.6H24V24l-12.9-1.801"/>
                              </svg>
                            )}
                            {os.name === 'Mac' && (
                              <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor">
                                <path d="M11.03 2.59a5.5 5.5 0 0 1 3.47 2.06c.43.6.76 1.3.96 2.06.73-.83 1.56-1.46 2.83-1.46 1.36 0 2.6.9 3.07 2.13.44 1.23.4 2.63-.26 3.8-.37.63-.93 1.17-1.43 1.6-.3.26-.6.5-.83.66.23.17.53.4.83.66.5.43 1.07.97 1.43 1.6.67 1.17.7 2.57.27 3.8-.47 1.23-1.71 2.13-3.07 2.13-1.27 0-2.1-.63-2.83-1.46-.2.76-.53 1.47-.97 2.06a5.5 5.5 0 0 1-3.47 2.07c-1.36 0-2.6-.9-3.06-2.13-.44-1.23-.4-2.63.26-3.8.37-.63.93-1.17 1.43-1.6.3-.26.6-.5.83-.66-.23-.17-.53-.4-.83-.66-.5-.43-1.06-.97-1.43-1.6-.67-1.17-.7-2.57-.26-3.8.46-1.23 1.7-2.13 3.06-2.13 1.27 0 2.1.63 2.83 1.46.2-.76.54-1.46.97-2.06a5.5 5.5 0 0 1 3.47-2.07m0-2.03c-1.95 0-3.73.4-5.07 1.8-1.6 1.63-1.73 3.43-1.73 5.57 0 1.1.23 2.23.93 3.1.5.63 1.17 1.13 1.77 1.53-.6.4-1.27.9-1.77 1.53-.7.87-.93 2-.93 3.1 0 2.13.13 3.93 1.73 5.57 1.34 1.4 3.12 1.8 5.07 1.8 1.95 0 3.73-.4 5.07-1.8 1.6-1.63 1.73-3.43 1.73-5.57 0-1.1-.23-2.23-.93-3.1-.5-.63-1.17-1.13-1.77-1.53.6-.4 1.27-.9 1.77-1.53.7-.87.93-2 .93-3.1 0-2.13-.13-3.93-1.73-5.57-1.34-1.4-3.12-1.8-5.07-1.8z"/>
                              </svg>
                            )}
                            {os.name === 'Linux' && (
                              <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor">
                                <path d="M12.5 0c-.81 0-1.5.68-1.5 1.5v.68c-.32.08-.64.17-.94.3l-.48-.48a1.5 1.5 0 0 0-2.12 0 1.5 1.5 0 0 0 0 2.12l.48.48a5.2 5.2 0 0 0-.3.94H6.5a1.5 1.5 0 0 0-1.5 1.5 1.5 1.5 0 0 0 1.5 1.5h.68c.08.32.17.64.3.94l-.48.48a1.5 1.5 0 0 0 0 2.12 1.5 1.5 0 0 0 2.12 0l.48-.48c.3.13.62.22.94.3v.68a1.5 1.5 0 0 0 1.5 1.5 1.5 1.5 0 0 0 1.5-1.5v-.68c.32-.08.64-.17.94-.3l.48.48a1.5 1.5 0 0 0 2.12 0 1.5 1.5 0 0 0 0-2.12l-.48-.48c.13-.3.22-.62.3-.94h.68a1.5 1.5 0 0 0 1.5-1.5 1.5 1.5 0 0 0-1.5-1.5h-.68c-.08-.32-.17-.64-.3-.94l.48-.48a1.5 1.5 0 0 0 0-2.12 1.5 1.5 0 0 0-2.12 0l-.48.48a5.2 5.2 0 0 0-.94-.3V1.5a1.5 1.5 0 0 0-1.5-1.5zM12 5a4 4 0 0 1 4 4 4 4 0 0 1-4 4 4 4 0 0 1-4-4 4 4 0 0 1 4-4z"/>
                              </svg>
                            )}
                          </span>
                        ))}
                      </span>
                    </div>
                  )}
                </div>
                <p class="text-sm text-gray-700 dark:text-gray-300 mb-2 line-clamp-2 tool-description">{tool.description}</p>
              </div>
              <a 
                href={`/tools/${tool.petrahubid}`} 
                class="text-sm px-3 py-1 bg-blue-600 hover:bg-blue-700 text-white rounded transition-colors ml-4"
              >
                Details
              </a>
            </div>
            
            <div class="flex flex-wrap gap-1 mb-2">
              {tool.topics && tool.topics.slice(0, 5).map((topic) => (
                <span class="tool-topic px-2 py-0.5 text-xs bg-blue-100 dark:bg-blue-900 text-blue-800 dark:text-blue-100 rounded-full">
                  {topic.term}
                </span>
              ))}
              {tool.topics && tool.topics.length > 5 && (
                <span class="px-2 py-0.5 text-xs bg-gray-100 dark:bg-gray-800 text-gray-700 dark:text-gray-300 rounded-full">
                  +{tool.topics.length - 5}
                </span>
              )}
            </div>
            
            <div class="flex flex-wrap items-center gap-3 text-xs text-gray-600 dark:text-gray-400">
              {tool.accessibility && (
                <span>
                  {tool.accessibility}
                </span>
              )}
              
              {tool.toolTypes && tool.toolTypes.length > 0 && (
                <span>
                  {tool.toolTypes.map((type, i) => (
                    <span class="tool-type">
                      {i > 0 ? ', ' : ''}{type.type}
                    </span>
                  ))}
                </span>
              )}
            </div>
          </div>
        </div>
      ))}
    </div>
    
    <!-- No Results Message -->
    <div id="no-results" class="hidden text-center py-10">
      <h3 class="text-xl font-semibold">No tools match your search criteria</h3>
      <p class="text-gray-600 dark:text-gray-400 mt-2">Try adjusting your filters or search term</p>
    </div>
  </section>
</Layout>

<script>
  // Client-side JavaScript for search and filtering
  document.addEventListener('DOMContentLoaded', () => {
    const searchInput = document.getElementById('search');
    const searchButton = document.getElementById('search-button');
    const topicFilter = document.getElementById('topic-filter');
    const osFilter = document.getElementById('os-filter');
    const typeFilter = document.getElementById('type-filter');
    const languageFilter = document.getElementById('language-filter');
    const accessibilityFilter = document.getElementById('accessibility-filter');
    const resetButton = document.getElementById('reset-filters');
    const toolCards = document.querySelectorAll('.tool-card');
    const noResults = document.getElementById('no-results');
    
    // View toggle elements
    const gridViewBtn = document.getElementById('grid-view-btn');
    const listViewBtn = document.getElementById('list-view-btn');
    const toolsGrid = document.getElementById('tools-grid');
    const toolsList = document.getElementById('tools-list');
    
    // Filter function
    function filterTools() {
      const searchTerm = searchInput.value.toLowerCase();
      const selectedTopic = topicFilter ? topicFilter.value : '';
      const selectedOS = osFilter ? osFilter.value : '';
      const selectedType = typeFilter ? typeFilter.value : '';
      const selectedLanguage = languageFilter ? languageFilter.value : '';
      const selectedAccessibility = accessibilityFilter ? accessibilityFilter.value : '';
      
      let visibleCount = 0;
      
      toolCards.forEach(card => {
        const name = card.querySelector('.tool-name').textContent.toLowerCase();
        const description = card.querySelector('.tool-description').textContent.toLowerCase();
        const accessibility = card.dataset.accessibility ? card.dataset.accessibility.toLowerCase() : '';
        
        // Check if card matches search term
        const matchesSearch = name.includes(searchTerm) || description.includes(searchTerm);
        
        // Check if card matches topic filter
        const matchesTopic = selectedTopic === '' || 
          Array.from(card.querySelectorAll('.tool-topic')).some(el => el.textContent.trim() === selectedTopic);
        
        // Check if card matches OS filter
        const matchesOS = selectedOS === '' || 
          Array.from(card.querySelectorAll('.tool-os')).some(el => el.title === selectedOS);
        
        // Check if card matches type filter
        const matchesType = selectedType === '' || 
          Array.from(card.querySelectorAll('.tool-type')).some(el => el.textContent.includes(selectedType));
          
        // Check if card matches language filter
        const matchesLanguage = selectedLanguage === '' || 
          Array.from(card.querySelectorAll('.tool-language')).some(el => el.textContent.includes(selectedLanguage));
          
        // Check if card matches accessibility filter
        const matchesAccessibility = selectedAccessibility === '' || 
          accessibility.includes(selectedAccessibility.toLowerCase());
        
        // Show or hide card based on filters
        if (matchesSearch && matchesTopic && matchesOS && matchesType && matchesLanguage && matchesAccessibility) {
          card.style.display = '';
          visibleCount++;
        } else {
          card.style.display = 'none';
        }
      });
      
      // Show or hide no results message
      if (visibleCount === 0 && noResults) {
        noResults.style.display = 'block';
      } else if (noResults) {
        noResults.style.display = 'none';
      }
    }
    
    // Reset filters function
    function resetFilters() {
      if (searchInput) searchInput.value = '';
      if (topicFilter) topicFilter.value = '';
      if (osFilter) osFilter.value = '';
      if (typeFilter) typeFilter.value = '';
      if (languageFilter) languageFilter.value = '';
      if (accessibilityFilter) accessibilityFilter.value = '';
      
      // Show all cards
      toolCards.forEach(card => {
        card.style.display = '';
      });
      
      // Hide no results message
      if (noResults) noResults.style.display = 'none';
    }
    
    // View toggle functions
    function showGridView() {
      if (toolsGrid && toolsList) {
        toolsGrid.classList.remove('hidden');
        toolsList.classList.add('hidden');
        
        // Update active button styles
        gridViewBtn.classList.add('active-view');
        listViewBtn.classList.remove('active-view');
        
        // Store preference
        localStorage.setItem('toolsViewPreference', 'grid');
      }
    }
    
    function showListView() {
      if (toolsGrid && toolsList) {
        toolsGrid.classList.add('hidden');
        toolsList.classList.remove('hidden');
        
        // Update active button styles
        gridViewBtn.classList.remove('active-view');
        listViewBtn.classList.add('active-view');
        
        // Store preference
        localStorage.setItem('toolsViewPreference', 'list');
      }
    }
    
    // Add event listeners
    if (searchInput) searchInput.addEventListener('input', filterTools);
    if (searchButton) {
      searchButton.addEventListener('click', (e) => {
        e.preventDefault();
        filterTools();
      });
    }
    if (topicFilter) topicFilter.addEventListener('change', filterTools);
    if (osFilter) osFilter.addEventListener('change', filterTools);
    if (typeFilter) typeFilter.addEventListener('change', filterTools);
    if (languageFilter) languageFilter.addEventListener('change', filterTools);
    if (accessibilityFilter) accessibilityFilter.addEventListener('change', filterTools);
    if (resetButton) resetButton.addEventListener('click', resetFilters);
    
    // View toggle event listeners
    if (gridViewBtn) gridViewBtn.addEventListener('click', showGridView);
    if (listViewBtn) listViewBtn.addEventListener('click', showListView);
    
    // Load user's view preference
    const viewPreference = localStorage.getItem('toolsViewPreference');
    if (viewPreference === 'list') {
      showListView();
    } else {
      showGridView();
    }
    
    // Run initial filter (in case URL has search parameters)
    filterTools();
  });
</script>
