---
import { getToolWithDetails } from '../../utils/database.js';
import { supabase } from '../../utils/supabase.js';
import Layout from '~/layouts/PageLayout.astro';
import { Icon } from 'astro-icon/components';

// This function is required for dynamic routes in Astro
export async function getStaticPaths() {
  const { data: tools, error } = await supabase
    .from('tools')
    .select('petrahubid');
  
  if (error || !tools) {
    console.error('Error fetching tools:', error);
    return [];
  }

  return tools.map(tool => ({
    params: { petrahubid: tool.petrahubid },
  }));
}

// Get the tool ID from the URL
const { petrahubid } = Astro.params;

// Fetch the tool data
const tool = await getToolWithDetails(petrahubid);

// Handle 404 if tool not found
if (!tool) {
  return Astro.redirect('/404');
}

const metadata = {
  title: `${tool.name} - Petrology Tool Details`,
  description: tool.description,
};
---

<Layout metadata={metadata}>
  <section class="px-4 py-16 sm:px-6 mx-auto lg:px-8 lg:py-20 max-w-6xl">
    <div class="grid gap-6 row-gap-10 md:grid-cols-1">
      <div class="md:pb-6 md:pr-16">
        <div class="flex items-center justify-between mb-8">
          <div class="flex items-center gap-3">
            <h2 class="text-3xl font-bold tracking-tight sm:text-4xl sm:leading-none">{tool.name}</h2>
            {/* Try to load logo based on petrahubid */}
            {(() => {
              const logoPath = `/src/assets/tool_logos/${tool.petrahubid.toLowerCase()}_logo`;
              // Only attempt to show logo if we know it exists
              if (tool.logo) {
                return (
                  <div class="h-12 flex items-center">
                    <img 
                      src={tool.logo}
                      alt={`${tool.name} Logo`}
                      class="h-12 w-auto object-contain"
                    />
                  </div>
                );
              }
              return null;
            })()}
          </div>
          <a href="/tools" class="text-blue-600 hover:text-blue-800 flex items-center">
            <Icon name="tabler:arrow-left" class="w-5 h-5 mr-1" />
            Back to Tools
          </a>
        </div>

        {tool.version && (
          <div class="mb-2">
            <span class="font-semibold">Version:</span> {tool.version}
          </div>
        )}

        <div class="mb-6">
          <p class="text-gray-700 dark:text-gray-400">{tool.description}</p>
        </div>

        <div class="grid grid-cols-1 md:grid-cols-2 gap-6 mb-8">
          {tool.homepage && (
            <div>
              <h3 class="font-semibold mb-2">Homepage</h3>
              <a href={tool.homepage} target="_blank" rel="noopener noreferrer" class="text-blue-600 hover:text-blue-800 flex items-center">
                <Icon name="tabler:external-link" class="w-4 h-4 mr-1" />
                Visit Website
              </a>
            </div>
          )}

          {tool.license && (
            <div>
              <h3 class="font-semibold mb-2">License</h3>
              <p>{tool.license}</p>
            </div>
          )}

          {tool.accessibility && (
            <div>
              <h3 class="font-semibold mb-2">Accessibility</h3>
              <p>{tool.accessibility}</p>
            </div>
          )}

          {tool.cost && (
            <div>
              <h3 class="font-semibold mb-2">Cost</h3>
              <p>{tool.cost}</p>
            </div>
          )}

          {tool.development_stage && (
            <div>
              <h3 class="font-semibold mb-2">Development Stage</h3>
              <p>{tool.development_stage}</p>
            </div>
          )}

          {tool.maturity && (
            <div>
              <h3 class="font-semibold mb-2">Maturity</h3>
              <p>{tool.maturity}</p>
            </div>
          )}
        </div>

        {tool.topics && tool.topics.length > 0 && (
          <div class="mb-8">
            <h3 class="font-semibold mb-3">Topics</h3>
            <div class="flex flex-wrap gap-2">
              {tool.topics.map((topic: { term: string }) => (
                <span class="px-3 py-1 text-sm bg-blue-100 dark:bg-blue-900 text-blue-800 dark:text-blue-100 rounded-full">
                  {topic.term}
                </span>
              ))}
            </div>
          </div>
        )}

        {tool.functions && tool.functions.length > 0 && (
          <div class="mb-8">
            <h3 class="font-semibold mb-3">Functions</h3>
            <ul class="list-disc pl-5 space-y-2">
              {tool.functions.map((func: { operation?: string; function_name?: string; note?: string }) => (
                <li>
                  <span class="font-medium">{func.operation || func.function_name || ''}</span>
                  {func.note && <span class="text-gray-600 dark:text-gray-400"> - {func.note}</span>}
                </li>
              ))}
            </ul>
          </div>
        )}

        {tool.operatingSystems && tool.operatingSystems.length > 0 && (
          <div class="mb-8">
            <h3 class="font-semibold mb-3">Operating Systems</h3>
            <div class="flex flex-wrap gap-2">
              {tool.operatingSystems.map((os: { name: string }) => (
                <span class="px-3 py-1 text-sm bg-gray-100 dark:bg-gray-800 text-gray-800 dark:text-gray-200 rounded-full">
                  {os.name}
                </span>
              ))}
            </div>
          </div>
        )}

        {tool.toolTypes && tool.toolTypes.length > 0 && (
          <div class="mb-8">
            <h3 class="font-semibold mb-3">Tool Types</h3>
            <div class="flex flex-wrap gap-2">
              {tool.toolTypes.map((type: { type: string }) => (
                <span class="px-3 py-1 text-sm bg-green-100 dark:bg-green-900 text-green-800 dark:text-green-100 rounded-full">
                  {type.type}
                </span>
              ))}
            </div>
          </div>
        )}

        {tool.languages && tool.languages.length > 0 && (
          <div class="mb-8">
            <h3 class="font-semibold mb-3">Programming Languages</h3>
            <div class="flex flex-wrap gap-2">
              {tool.languages.map((lang: { name: string }) => (
                <span class="px-3 py-1 text-sm bg-purple-100 dark:bg-purple-900 text-purple-800 dark:text-purple-100 rounded-full">
                  {lang.name}
                </span>
              ))}
            </div>
          </div>
        )}
        {tool.citation && (
          <div class="mb-8">
            <h3 class="font-semibold mb-3">Citation</h3>
            <div class="bg-gray-50 dark:bg-gray-800 p-4 rounded-lg">
              {(() => {
                try {
                  const citationData = typeof tool.citation === 'string' ? JSON.parse(tool.citation) : tool.citation;
                  return (
                    <div>
                      {citationData.papers && citationData.papers.map((paper: { title: string; authors: string; year: string; journal: string; doi?: string }) => (
                        <div class="mb-3 last:mb-0">
                          <p class="font-medium">{paper.title}</p>
                          <p class="text-sm text-gray-600 dark:text-gray-400">
                            {paper.authors} ({paper.year}). {paper.journal}.
                            {paper.doi && (
                              <a href={`https://doi.org/${paper.doi}`} target="_blank" rel="noopener noreferrer" 
                                 class="ml-1 text-blue-600 hover:text-blue-800">
                                DOI: {paper.doi}
                              </a>
                            )}
                          </p>
                        </div>
                      ))}
                    </div>
                  );
                } catch (e) {
                  return <p>{tool.citation}</p>;
                }
              })()}
            </div>
          </div>
        )}

        {tool.support && (
          <div class="mb-8">
            <h3 class="font-semibold mb-3">Support</h3>
            <div class="bg-gray-50 dark:bg-gray-800 p-4 rounded-lg">
              {(() => {
                try {
                  const supportData = typeof tool.support === 'string' ? JSON.parse(tool.support) : tool.support;
                  return (
                    <div>
                      {supportData.contacts && supportData.contacts.map((contact: { name: string; role?: string; email?: string }) => (
                        <div class="mb-2 last:mb-0">
                          <p class="font-medium">{contact.name} {contact.role && `(${contact.role})`}</p>
                          {contact.email && (
                            <a href={`mailto:${contact.email}`} class="text-blue-600 hover:text-blue-800">
                              {contact.email}
                            </a>
                          )}
                        </div>
                      ))}
                    </div>
                  );
                } catch (e) {
                  return <p>{tool.support}</p>;
                }
              })()}
            </div>
          </div>
        )}

        {tool.documentation && (
          <div class="mb-8">
            <h3 class="font-semibold mb-3">Documentation</h3>
            <a href={tool.documentation} target="_blank" rel="noopener noreferrer" 
               class="text-blue-600 hover:text-blue-800 flex items-center">
              <Icon name="tabler:file-text" class="w-5 h-5 mr-1" />
              View Documentation
            </a>
          </div>
        )}

      </div>
    </div>
  </section>
</Layout>
