---
import Layout from '~/layouts/PageLayout.astro';
import { getTools, getAllTopics, getAllOperatingSystems, getAllToolTypes, getAllLanguages } from '~/utils/database';
import ToolSearch from '~/components/tools/ToolSearch.astro';
import { Icon } from 'astro-icon/components';

// Get search parameter from URL
const searchTerm = Astro.url.searchParams.get('search') || '';

// Fetch all tools and filter options
const tools = await getTools();
const topics = await getAllTopics();
const operatingSystems = await getAllOperatingSystems();
const toolTypes = await getAllToolTypes();
const languages = await getAllLanguages();

const metadata = {
  title: 'Petrology Tools',
  description: 'Browse and search for tools used in petrology research',
};
---

<Layout metadata={metadata}>
  <section class="px-4 py-8 sm:px-6 mx-auto lg:px-8 lg:py-12 max-w-6xl">
    <div class="mb-6 md:mx-auto text-center md:mb-8 max-w-3xl">
      <h1 class="text-3xl md:text-4xl font-bold leading-tighter tracking-tighter mb-2 font-heading">
        Petrology Tools
      </h1>
      <p class="text-lg text-gray-600 dark:text-slate-400">
        Browse and search for tools used in petrology research
      </p>
    </div>

    <!-- Search and Filter Component -->
    <div class="mb-6 sticky top-0 z-10">
      <ToolSearch 
        topics={topics} 
        operatingSystems={operatingSystems} 
        toolTypes={toolTypes} 
        languages={languages}
        initialSearchTerm={searchTerm}
      />
    </div>
    
    <!-- View Toggle -->
    <div class="flex justify-end mb-4">
      <div class="inline-flex rounded-md shadow-sm" role="group">
        <button 
          type="button" 
          id="grid-view-btn"
          class="px-4 py-2 text-sm font-medium text-gray-900 bg-white border border-gray-200 rounded-l-lg hover:bg-gray-100 hover:text-blue-700 focus:z-10 focus:ring-2 focus:ring-blue-700 focus:text-blue-700 dark:bg-gray-700 dark:border-gray-600 dark:text-white dark:hover:text-white dark:hover:bg-gray-600 dark:focus:ring-blue-500 dark:focus:text-white active-view"
        >
          <svg class="w-4 h-4" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg">
            <path fill-rule="evenodd" d="M5 3a2 2 0 00-2 2v2a2 2 0 002 2h2a2 2 0 002-2V5a2 2 0 00-2-2H5zM5 11a2 2 0 00-2 2v2a2 2 0 002 2h2a2 2 0 002-2v-2a2 2 0 00-2-2H5zM11 5a2 2 0 012-2h2a2 2 0 012 2v2a2 2 0 01-2 2h-2a2 2 0 01-2-2V5zM11 13a2 2 0 012-2h2a2 2 0 012 2v2a2 2 0 01-2 2h-2a2 2 0 01-2-2v-2z" clip-rule="evenodd"></path>
          </svg>
        </button>
        <button 
          type="button" 
          id="list-view-btn"
          class="px-4 py-2 text-sm font-medium text-gray-900 bg-white border border-gray-200 rounded-r-md hover:bg-gray-100 hover:text-blue-700 focus:z-10 focus:ring-2 focus:ring-blue-700 focus:text-blue-700 dark:bg-gray-700 dark:border-gray-600 dark:text-white dark:hover:text-white dark:hover:bg-gray-600 dark:focus:ring-blue-500 dark:focus:text-white"
        >
          <svg class="w-4 h-4" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg">
            <path fill-rule="evenodd" d="M3 5a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1zM3 10a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1zM3 15a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1z" clip-rule="evenodd"></path>
          </svg>
        </button>
      </div>
    </div>

    <!-- Tools Grid -->
    <div id="tools-grid" class="grid gap-4 md:grid-cols-2 lg:grid-cols-3">
      {tools.map((tool) => (
        <div 
          class="tool-card flex flex-col border border-gray-200 dark:border-gray-700 rounded-lg overflow-hidden transition-all duration-200 hover:shadow-lg"
          data-accessibility={tool.accessibility}
        >
          <div class="p-4 flex-grow">
            <div class="flex items-center gap-2 mb-1">
              <h2 class="text-lg font-bold tool-name">{tool.name}</h2>
              {tool.operatingSystems && tool.operatingSystems.length > 0 && (
                <div class="flex items-center">
                  <span class="flex gap-1">
                    {tool.operatingSystems.map((os) => (
                      <span class="tool-os inline-block w-4 h-4" title={os.name}>
                        {os.name === 'Windows' && (
                          <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor">
                            <path d="M0 3.449L9.75 2.1v9.451H0m10.949-9.602L24 0v11.4H10.949M0 12.6h9.75v9.451L0 20.699M10.949 12.6H24V24l-12.9-1.801"/>
                          </svg>
                        )}
                        {os.name === 'Mac' && (
                          <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 384 512" fill="currentColor">
                            <path d="M318.7 268.7c-.2-36.7 16.4-64.4 50-84.8-18.8-26.9-47.2-41.7-84.7-44.6-35.5-2.8-74.3 20.7-88.5 20.7-15 0-49.4-19.7-76.4-19.7C63.3 141.2 4 184.8 4 273.5q0 39.3 14.4 81.2c12.8 36.7 59 126.7 107.2 125.2 25.2-.6 43-17.9 75.8-17.9 31.8 0 48.3 17.9 76.4 17.9 48.6-.7 90.4-82.5 102.6-119.3-65.2-30.7-61.7-90-61.7-91.9zm-56.6-164.2c27.3-32.4 24.8-61.9 24-72.5-24.1 1.4-52 16.4-67.9 34.9-17.5 19.8-27.8 44.3-25.6 71.9 26.1 2 49.9-11.4 69.5-34.3z"/>
                          </svg>
                       )}
                        {os.name === 'Linux' && (
                          <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 448 512" fill="currentColor">
                            <path d="M220.8 123.3c1 .5 1.8 1.7 3 1.7 1.1 0 2.8-.4 2.9-1.5.2-1.4-1.9-2.3-3.2-2.9-1.7-.7-3.9-1-5.5-.1-.4.2-.8.7-.6 1.1.3 1.3 2.3 1.1 3.4 1.7zm-21.9 1.7c1.2 0 2-1.2 3-1.7 1.1-.6 3.1-.4 3.5-1.6.2-.4-.2-.9-.6-1.1-1.6-.9-3.8-.6-5.5.1-1.3.6-3.4 1.5-3.2 2.9.1 1 1.8 1.5 2.8 1.4zM420 403.8c-3.6-4-5.3-11.6-7.2-19.7-1.8-8.1-3.9-16.8-10.5-22.4-1.3-1.1-2.6-2.1-4-2.9-1.3-.8-2.7-1.5-4.1-2 9.2-27.3 5.6-54.5-3.7-79.1-11.4-30.1-31.3-56.4-46.5-74.4-17.1-21.5-33.7-41.9-33.4-72C311.1 85.4 315.7.1 234.8 0 132.4-.2 158 103.4 156.9 135.2c-1.7 23.4-6.4 41.8-22.5 64.7-18.9 22.5-45.5 58.8-58.1 96.7-6 17.9-8.8 36.1-6.2 53.3-6.5 5.8-11.4 14.7-16.6 20.2-4.2 4.3-10.3 5.9-17 8.3s-14 6-18.5 14.5c-2.1 3.9-2.8 8.1-2.8 12.4 0 3.9.6 7.9 1.2 11.8 1.2 8.1 2.5 15.7.8 20.8-5.2 14.4-5.9 24.4-2.2 31.7 3.8 7.3 11.4 10.5 20.1 12.3 17.3 3.6 40.8 2.7 59.3 12.5 19.8 10.4 39.9 14.1 55.9 10.4 11.6-2.6 21.1-9.6 25.9-20.2 12.5-.1 26.3-5.4 48.3-6.6 14.9-1.2 33.6 5.3 55.1 4.1.6 2.3 1.4 4.6 2.5 6.7v.1c8.3 16.7 23.8 24.3 40.3 23 16.6-1.3 34.1-11 48.3-27.9 13.6-16.4 36-23.2 50.9-32.2 7.4-4.5 13.4-10.1 13.9-18.3.4-8.2-4.4-17.3-15.5-29.7zM223.7 87.3c9.8-22.2 34.2-21.8 44-.4 6.5 14.2 3.6 30.9-4.3 40.4-1.6-.8-5.9-2.6-12.6-4.9 1.1-1.2 3.1-2.7 3.9-4.6 4.8-11.8-.2-27-9.1-27.3-7.3-.5-13.9 10.8-11.8 23-4.1-2-9.4-3.5-13-4.4-1-6.9-.3-14.6 2.9-21.8zM183 75.8c10.1 0 20.8 14.2 19.1 33.5-3.5 1-7.1 2.5-10.2 4.6 1.2-8.9-3.3-20.1-9.6-19.6-8.4.7-9.8 21.2-1.8 28.1 1 .8 1.9-.2-5.9 5.5-15.6-14.6-10.5-52.1 8.4-52.1zm-13.6 60.7c6.2-4.6 13.6-10 14.1-10.5 4.7-4.4 13.5-14.2 27.9-14.2 7.1 0 15.6 2.3 25.9 8.9 6.3 4.1 11.3 4.4 22.6 9.3 8.4 3.5 13.7 9.7 10.5 18.2-2.6 7.1-11 14.4-22.7 18.1-11.1 3.6-19.8 16-38.2 14.9-3.9-.2-7-1-9.6-2.1-8-3.5-12.2-10.4-20-15-8.6-4.8-13.2-10.4-14.7-15.3-1.4-4.9 0-9 4.2-12.3zm3.3 334c-2.7 35.1-43.9 34.4-75.3 18-29.9-15.8-68.6-6.5-76.5-21.9-2.4-4.7-2.4-12.7 2.6-26.4v-.2c2.4-7.6.6-16-.6-23.9-1.2-7.8-1.8-15 .9-20 3.5-6.7 8.5-9.1 14.8-11.3 10.3-3.7 11.8-3.4 19.6-9.9 5.5-5.7 9.5-12.9 14.3-18 5.1-5.5 10-8.1 17.7-6.9 8.1 1.2 15.1 6.8 21.9 16l19.6 35.6c9.5 19.9 43.1 48.4 41 68.9zm-1.4-25.9c-4.1-6.6-9.6-13.6-14.4-19.6 7.1 0 14.2-2.2 16.7-8.9 2.3-6.2 0-14.9-7.4-24.9-13.5-18.2-38.3-32.5-38.3-32.5-13.5-8.4-21.1-18.7-24.6-29.9s-3-23.3-.3-35.2c.2-.9.4-1.7.6-2.6 5 13.3 15.6 23.8 26.6 30.9 11.9 7.6 23.6 13.3 36.9 17.9 4.2 1.5 8.5 3.6 13 4.9-1.6 7.5-5.5 14.6-12.8 19.9-9.2 6.2-19.9 9.2-30.3 11.3-8.6 1.8-15.4 6.1-18.8 12.7-3.3 6.4-2.5 13-.6 20.3 2.6 10.3 8.6 19.2 8.6 19.2s.7-2.3 2.2-6.2c1.2-3.5 3.5-8.4 6.2-13.1 2.7-4.6 5.8-9.2 9.3-13.3 3.5-4.2 7.5-7.7 11.9-9.8 4.3-2.1 9.2-2.7 13.4-.5 4.4 2.3 6.6 7.1 7.9 11.6 2.5 9.1 2.9 18.6.1 24.8-2.8 6.1-8.6 8.1-11.8 10.1-3.2 1.9-3.3 3.7-4 5.5-.7 1.7-1.5 3.6-3.3 4.5-.7.4-1.6.5-2.5.5-4.4-.2-8.6-3.8-10.1-11.7-1-4.6-2.4-12.1-4.8-16.5-.2-.3-.4-.6-.5-.9z"/>
                          </svg>
                          )}
                      </span>
                    ))}
                  </span>
                </div>
              )}
            </div>
            <p class="text-sm text-gray-700 dark:text-gray-300 mb-3 line-clamp-2 tool-description">{tool.description}</p>
            
            <div class="flex flex-wrap gap-1 mb-3">
              {tool.topics && tool.topics.slice(0, 3).map((topic) => (
                <span class="tool-topic px-2 py-0.5 text-xs bg-blue-100 dark:bg-blue-900 text-blue-800 dark:text-blue-100 rounded-full">
                  {topic.term}
                </span>
              ))}
              {tool.topics && tool.topics.length > 3 && (
                <span class="px-2 py-0.5 text-xs bg-gray-100 dark:bg-gray-800 text-gray-700 dark:text-gray-300 rounded-full">
                  +{tool.topics.length - 3}
                </span>
              )}
            </div>
            
            <div class="flex flex-wrap items-center gap-3 text-sm text-gray-600 dark:text-gray-400">
              {tool.accessibility && (
                <span class="text-xs">
                  {tool.accessibility}
                </span>
              )}
              
              {tool.toolTypes && tool.toolTypes.length > 0 && (
                <span class="text-xs">
                  {tool.toolTypes.map((type, i) => (
                    <span class="tool-type">
                      {i > 0 ? ', ' : ''}{type.type}
                    </span>
                  ))}
                </span>
              )}
            </div>
          </div>
          
          <div class="p-3 bg-gray-50 dark:bg-gray-800 flex justify-between items-center">
            <a 
              href={`/tools/${tool.petrahubid}`} 
              class="text-sm px-3 py-1 bg-blue-600 hover:bg-blue-700 text-white rounded transition-colors"
            >
              Details
            </a>
          </div>
        </div>
      ))}
    </div>
    
    <!-- Tools List (hidden by default) -->
    <div id="tools-list" class="flex flex-col gap-3 hidden">
      {tools.map((tool) => (
        <div 
          class="tool-card flex border border-gray-200 dark:border-gray-700 rounded-lg overflow-hidden transition-all duration-200 hover:shadow-lg"
          data-accessibility={tool.accessibility}
        >
          <div class="p-4 flex-grow">
            <div class="flex justify-between items-start">
              <div>
                <div class="flex items-center gap-2 mb-1">
                  <h2 class="text-lg font-bold tool-name">{tool.name}</h2>
                  {tool.operatingSystems && tool.operatingSystems.length > 0 && (
                    <div class="flex items-center">
                      <span class="flex gap-1">
                        {tool.operatingSystems.map((os) => (
                          <span class="tool-os inline-block w-4 h-4" title={os.name}>
                            {os.name === 'Windows' && (
                              <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor">
                                <path d="M0 3.449L9.75 2.1v9.451H0m10.949-9.602L24 0v11.4H10.949M0 12.6h9.75v9.451L0 20.699M10.949 12.6H24V24l-12.9-1.801"/>
                              </svg>
                            )}
                            {os.name === 'Mac' && (
                              <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor">
                                <path d="M16.365 1.43c-.92.06-2.01.66-2.66 1.45-.58.7-1.09 1.84-.9 2.9 1.01.08 2.07-.53 2.7-1.33.62-.78 1.1-1.94.86-3.02zm-4.66 4.74c-1.82 0-3.39 1.09-4.29 2.75-1.83 3.37-.47 8.44 1.3 11.2.86 1.34 1.88 2.83 3.28 2.79 1.33-.05 1.84-.89 3.45-.89 1.6 0 2.06.89 3.44.86 1.42-.03 2.31-1.37 3.17-2.72 1-1.55 1.4-3.06 1.43-3.14-.03-.02-2.76-1.06-2.79-4.2-.02-2.64 2.16-3.91 2.26-3.98-1.24-1.78-3.17-1.98-3.84-2-1.62-.16-3.14.95-3.97.95-.83 0-2.12-.93-3.54-.91z"/>
                              </svg>
                            )}
                            {os.name === 'Linux' && (
                              <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512" fill="currentColor">
                                <path d="M256 0c-47.6 0-88 39.4-88 88s39.4 88 88 88 88-39.4 88-88S303.6 0 256 0zm120 320c0-48.6-32.2-89.8-76.4-105.8 4.6-8.5 8.4-17.5 11.1-26.8C361 213.8 416 285.2 416 368c0 79.5-62.5 144-140 144s-140-64.5-140-144c0-82.8 55-154.2 125.3-180.6 2.7 9.3 6.5 18.3 11.1 26.8C168.2 230.2 136 271.4 136 320c0 57.4 46.6 104 104 104s104-46.6 104-104z"/>
                              </svg>
                            )}
                          </span>
                        ))}
                      </span>
                    </div>
                  )}
                </div>
                <p class="text-sm text-gray-700 dark:text-gray-300 mb-2 line-clamp-2 tool-description">{tool.description}</p>
              </div>
              <a 
                href={`/tools/${tool.petrahubid}`} 
                class="text-sm px-3 py-1 bg-blue-600 hover:bg-blue-700 text-white rounded transition-colors ml-4"
              >
                Details
              </a>
            </div>
            
            <div class="flex flex-wrap gap-1 mb-2">
              {tool.topics && tool.topics.slice(0, 5).map((topic) => (
                <span class="tool-topic px-2 py-0.5 text-xs bg-blue-100 dark:bg-blue-900 text-blue-800 dark:text-blue-100 rounded-full">
                  {topic.term}
                </span>
              ))}
              {tool.topics && tool.topics.length > 5 && (
                <span class="px-2 py-0.5 text-xs bg-gray-100 dark:bg-gray-800 text-gray-700 dark:text-gray-300 rounded-full">
                  +{tool.topics.length - 5}
                </span>
              )}
            </div>
            
            <div class="flex flex-wrap items-center gap-3 text-xs text-gray-600 dark:text-gray-400">
              {tool.accessibility && (
                <span>
                  {tool.accessibility}
                </span>
              )}
              
              {tool.toolTypes && tool.toolTypes.length > 0 && (
                <span>
                  {tool.toolTypes.map((type, i) => (
                    <span class="tool-type">
                      {i > 0 ? ', ' : ''}{type.type}
                    </span>
                  ))}
                </span>
              )}
            </div>
          </div>
        </div>
      ))}
    </div>
    
    <!-- No Results Message -->
    <div id="no-results" class="hidden text-center py-10">
      <h3 class="text-xl font-semibold">No tools match your search criteria</h3>
      <p class="text-gray-600 dark:text-gray-400 mt-2">Try adjusting your filters or search term</p>
    </div>
  </section>
</Layout>

<script>
  // Client-side JavaScript for search and filtering
  document.addEventListener('DOMContentLoaded', () => {
    // Get DOM elements
    const searchInput = document.querySelector<HTMLInputElement>('#search');
    const searchButton = document.querySelector<HTMLButtonElement>('#search-button');
    const topicFilter = document.querySelector<HTMLSelectElement>('#topic-filter');
    const osFilter = document.querySelector<HTMLSelectElement>('#os-filter');
    const typeFilter = document.querySelector<HTMLSelectElement>('#type-filter');
    const languageFilter = document.querySelector<HTMLSelectElement>('#language-filter');
    const accessibilityFilter = document.querySelector<HTMLSelectElement>('#accessibility-filter');
    const resetButton = document.querySelector<HTMLButtonElement>('#reset-filters');
    const toolCards = document.querySelectorAll<HTMLElement>('.tool-card');
    const noResults = document.querySelector<HTMLElement>('#no-results');
    
    // View toggle elements
    const gridViewBtn = document.querySelector<HTMLButtonElement>('#grid-view-btn');
    const listViewBtn = document.querySelector<HTMLButtonElement>('#list-view-btn');
    const toolsGrid = document.querySelector<HTMLElement>('#tools-grid');
    const toolsList = document.querySelector<HTMLElement>('#tools-list');

    // Filter function
    const filterTools = () => {
      if (!searchInput) return;
      
      const searchTerm = searchInput.value.toLowerCase();
      const selectedTopic = topicFilter?.value ?? '';
      const selectedOS = osFilter?.value ?? '';
      const selectedType = typeFilter?.value ?? '';
      const selectedLanguage = languageFilter?.value ?? '';
      const selectedAccessibility = accessibilityFilter?.value ?? '';
      
      let visibleCount = 0;
      
      toolCards.forEach(card => {
        const name = card.querySelector('.tool-name')?.textContent?.toLowerCase() ?? '';
        const description = card.querySelector('.tool-description')?.textContent?.toLowerCase() ?? '';
        const accessibility = card.dataset.accessibility?.toLowerCase() ?? '';
        
        // Match conditions
        const matchesSearch = name.includes(searchTerm) || description.includes(searchTerm);
        const matchesTopic = !selectedTopic || card.querySelector(`.tool-topic[data-topic="${selectedTopic}"]`);
        const matchesOS = !selectedOS || card.querySelector(`.tool-os[title="${selectedOS}"]`);
        const matchesType = !selectedType || card.querySelector(`.tool-type[data-type="${selectedType}"]`);
        const matchesLanguage = !selectedLanguage || card.querySelector(`.tool-language[data-language="${selectedLanguage}"]`);
        const matchesAccessibility = !selectedAccessibility || accessibility.includes(selectedAccessibility.toLowerCase());
        
        // Show/hide based on all conditions
        if (matchesSearch && matchesTopic && matchesOS && matchesType && matchesLanguage && matchesAccessibility) {
          card.style.display = '';
          visibleCount++;
        } else {
          card.style.display = 'none';
        }
      });
      
      // Toggle no results message
      if (noResults) {
        noResults.style.display = visibleCount === 0 ? 'block' : 'none';
      }
    };

    // Reset filters
    const resetFilters = () => {
      [searchInput, topicFilter, osFilter, typeFilter, languageFilter, accessibilityFilter].forEach(filter => {
        if (filter) filter.value = '';
      });
      
      toolCards.forEach(card => card.style.display = '');
      if (noResults) noResults.style.display = 'none';
    };

    // View toggles
    const showGridView = () => {
      if (!toolsGrid || !toolsList || !gridViewBtn || !listViewBtn) return;
      
      toolsGrid.classList.remove('hidden');
      toolsList.classList.add('hidden');
      gridViewBtn.classList.add('active-view');
      listViewBtn.classList.remove('active-view');
      localStorage.setItem('toolsViewPreference', 'grid');
    };

    const showListView = () => {
      if (!toolsGrid || !toolsList || !gridViewBtn || !listViewBtn) return;
      
      toolsGrid.classList.add('hidden');
      toolsList.classList.remove('hidden');
      gridViewBtn.classList.remove('active-view');
      listViewBtn.classList.add('active-view');
      localStorage.setItem('toolsViewPreference', 'list');
    };

    // Event listeners
    searchInput?.addEventListener('input', filterTools);
    searchButton?.addEventListener('click', (e) => {
      e.preventDefault();
      filterTools();
    });
    
    [topicFilter, osFilter, typeFilter, languageFilter, accessibilityFilter].forEach(filter => {
      filter?.addEventListener('change', filterTools);
    });
    
    resetButton?.addEventListener('click', resetFilters);
    gridViewBtn?.addEventListener('click', showGridView);
    listViewBtn?.addEventListener('click', showListView);

    // Initialize view based on preference
    const viewPreference = localStorage.getItem('toolsViewPreference');
    if (viewPreference === 'list') {
      showListView();
    } else {
      showGridView();
    }

    // Initial filter
    filterTools();
  });
</script>
