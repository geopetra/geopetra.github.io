---
// Compact tool search component for use in headers
---

<div class="flex flex-col sm:flex-row gap-2 w-full">
  <div class="relative flex-grow">
    <input
      type="text"
      id="quick-search"
      placeholder="Search tools..."
      class="w-full px-4 py-2 pr-10 border border-gray-300 dark:border-gray-700 rounded-md focus:ring-blue-500 focus:border-blue-500 dark:bg-gray-700 dark:text-white"
    />
    <button 
      id="search-button"
      type="button"
      aria-label="Search"
      class="absolute right-2 top-1/2 transform -translate-y-1/2 text-gray-500 hover:text-gray-700 dark:text-gray-400 dark:hover:text-gray-200"
    >
      <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z" />
      </svg>
    </button>
  </div>
  <button
    id="advanced-search"
    type="button"
    class="px-4 py-2 bg-blue-600 hover:bg-blue-700 text-white rounded-md transition-colors"
  >
    Advanced Search
  </button>
</div>

<script is:inline>
  // Execute immediately without waiting for DOMContentLoaded
  (function() {
    function initializeCompactSearch() {
      const quickSearch = document.getElementById('quick-search');
      const searchButton = document.getElementById('search-button');
      const advancedSearch = document.getElementById('advanced-search');
      
      // Handle search button click
      function performSearch() {
        if (!quickSearch) return;
        const searchTerm = quickSearch.value.trim();
        if (searchTerm) {
          window.location.href = `/tools?search=${encodeURIComponent(searchTerm)}`;
        }
      }
      
      // Search on button click - use direct onclick attribute for reliability
      if (searchButton) {
        searchButton.setAttribute('onclick', `
          const input = document.getElementById('quick-search');
          if (input && input.value.trim()) {
            window.location.href = '/tools?search=' + encodeURIComponent(input.value.trim());
          }
          return false;
        `);
        
        // Also keep the event listener as backup
        searchButton.addEventListener('click', performSearch);
      }
      
      // Search on Enter key - use direct onkeypress attribute
      if (quickSearch) {
        quickSearch.setAttribute('onkeypress', `
          if(event.key === 'Enter') {
            event.preventDefault();
            const input = document.getElementById('quick-search');
            if (input && input.value.trim()) {
              window.location.href = '/tools?search=' + encodeURIComponent(input.value.trim());
            }
            return false;
          }
        `);
        
        // Also keep the event listener as backup
        quickSearch.addEventListener('keypress', function(e) {
          if (e.key === 'Enter') {
            performSearch();
          }
        });
      }
      
      // Navigate to advanced search
      if (advancedSearch) {
        advancedSearch.addEventListener('click', function() {
          window.location.href = '/tools';
        });
      }
    }
    
    // Try to initialize immediately
    initializeCompactSearch();
    
    // Also initialize on DOMContentLoaded as a fallback
    document.addEventListener('DOMContentLoaded', initializeCompactSearch);
  })();
</script>
