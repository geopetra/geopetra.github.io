---
// Tool search and filter component
const { 
  topics = [], 
  operatingSystems = [], 
  toolTypes = [], 
  languages = [], 
  initialSearchTerm = '',
  compactMode = false 
} = Astro.props;
---

<div class={`${compactMode ? 'relative' : 'mb-6 bg-gray-50 dark:bg-gray-800 rounded-lg'} overflow-visible`}>
  <!-- Search bar - always visible -->
  <div class={`${compactMode ? 'p-0' : 'p-4 border-b border-gray-200 dark:border-gray-700'}`}>
    <div class="flex gap-2">
      <div class="relative flex-grow">
        <input
          type="text"
          id={`search${compactMode ? '-header' : ''}`}
          placeholder="Search by name, description..."
          value={initialSearchTerm}
          class="w-full px-4 py-2 pr-10 border border-gray-300 dark:border-gray-700 rounded-md focus:ring-blue-500 focus:border-blue-500 dark:bg-gray-700 dark:text-white"
        />
        <button 
          id={`search-button${compactMode ? '-header' : ''}`}
          class="absolute right-2 top-1/2 transform -translate-y-1/2 text-gray-500 hover:text-gray-700 dark:text-gray-400 dark:hover:text-gray-200"
        >
          <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z" />
          </svg>
        </button>
      </div>
      <button
        id={`toggle-filters${compactMode ? '-header' : ''}`}
        class="px-4 py-2 bg-blue-600 hover:bg-blue-700 text-white rounded-md transition-colors flex items-center"
      >
        <span>Filters</span>
        <svg id={`filter-icon-down${compactMode ? '-header' : ''}`} xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 ml-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7" />
        </svg>
        <svg id={`filter-icon-up${compactMode ? '-header' : ''}`} xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 ml-1 hidden" fill="none" viewBox="0 0 24 24" stroke="currentColor">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 15l7-7 7 7" />
        </svg>
      </button>
    </div>
  </div>
  
  <!-- Advanced filters - collapsible -->
  <div id={`advanced-filters${compactMode ? '-header' : ''}`} class={`${compactMode ? 'fixed left-0 right-0 top-[var(--header-height)] bg-white dark:bg-gray-800 shadow-lg z-[100] border-t border-gray-200 dark:border-gray-700 transition-all duration-300' : ''} p-4 ${compactMode ? 'max-h-0 py-0 overflow-hidden opacity-0' : 'hidden'}`}>
    <div class="flex flex-wrap gap-4 mb-4 max-w-7xl mx-auto px-4">
      <div class="w-full md:w-auto">
        <label for="topic-filter" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">Topic</label>
        <select
          id="topic-filter"
          class="w-full px-4 py-2 border border-gray-300 dark:border-gray-700 rounded-md focus:ring-blue-500 focus:border-blue-500 dark:bg-gray-700 dark:text-white"
        >
          <option value="">All Topics</option>
          {topics.map((topic) => (
            <option value={topic.term}>{topic.term}</option>
          ))}
        </select>
      </div>
      
      <div class="w-full md:w-auto">
        <label for="os-filter" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">Operating System</label>
        <select
          id="os-filter"
          class="w-full px-4 py-2 border border-gray-300 dark:border-gray-700 rounded-md focus:ring-blue-500 focus:border-blue-500 dark:bg-gray-700 dark:text-white"
        >
          <option value="">All Operating Systems</option>
          {operatingSystems.map((os) => (
            <option value={os.name}>{os.name}</option>
          ))}
        </select>
      </div>
      
      <div class="w-full md:w-auto">
        <label for="type-filter" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">Tool Type</label>
        <select
          id="type-filter"
          class="w-full px-4 py-2 border border-gray-300 dark:border-gray-700 rounded-md focus:ring-blue-500 focus:border-blue-500 dark:bg-gray-700 dark:text-white"
        >
          <option value="">All Tool Types</option>
          {toolTypes.map((type) => (
            <option value={type.type}>{type.type}</option>
          ))}
        </select>
      </div>
      
      <div class="w-full md:w-auto">
        <label for="language-filter" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">Language</label>
        <select
          id="language-filter"
          class="w-full px-4 py-2 border border-gray-300 dark:border-gray-700 rounded-md focus:ring-blue-500 focus:border-blue-500 dark:bg-gray-700 dark:text-white"
        >
          <option value="">All Languages</option>
          {languages.map((lang) => (
            <option value={lang.name}>{lang.name}</option>
          ))}
        </select>
      </div>
      
      <div class="w-full md:w-auto">
        <label for="accessibility-filter" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">Accessibility</label>
        <select
          id="accessibility-filter"
          class="w-full px-4 py-2 border border-gray-300 dark:border-gray-700 rounded-md focus:ring-blue-500 focus:border-blue-500 dark:bg-gray-700 dark:text-white"
        >
          <option value="">All Accessibility</option>
          <option value="Open Source">Open Source</option>
          <option value="Free">Free</option>
          <option value="Commercial">Commercial</option>
        </select>
      </div>
    </div>
    
    <div class="flex justify-end max-w-7xl mx-auto">
      <button
        id="reset-filters"
        class="px-4 py-2 bg-gray-200 hover:bg-gray-300 dark:bg-gray-700 dark:hover:bg-gray-600 text-gray-800 dark:text-gray-200 rounded-md transition-colors"
      >
        Reset Filters
      </button>
    </div>
  </div>
</div>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    // Handle both regular and header versions
    ['', '-header'].forEach(suffix => {
      const toggleFilters = document.getElementById(`toggle-filters${suffix}`);
      const advancedFilters = document.getElementById(`advanced-filters${suffix}`);
      const filterIconDown = document.getElementById(`filter-icon-down${suffix}`);
      const filterIconUp = document.getElementById(`filter-icon-up${suffix}`);
      const searchInput = document.getElementById(`search${suffix}`) as HTMLInputElement;
      const searchButton = document.getElementById(`search-button${suffix}`);
      
      // Toggle advanced filters visibility
      if (toggleFilters && advancedFilters) {
        toggleFilters.addEventListener('click', (e) => {
          e.stopPropagation();
          
          if (suffix === '-header') {
            // For header version, use max-height transition
            if (advancedFilters.classList.contains('max-h-0')) {
              // Open the dropdown
              advancedFilters.classList.remove('max-h-0');
              advancedFilters.classList.add('max-h-[500px]');
              advancedFilters.classList.remove('py-0');
              advancedFilters.classList.add('py-4');
              advancedFilters.classList.remove('opacity-0');
              advancedFilters.classList.add('opacity-100');
              
              // Add body padding to prevent content jump
              document.body.style.paddingTop = '500px';
              
              // Move the filter dropdown to the container below header
              const container = document.getElementById('filter-dropdown-container');
              if (container) {
                container.appendChild(advancedFilters);
              }
              
              // Force a reflow to ensure the transition works
              void advancedFilters.offsetHeight;
            } else {
              // Close the dropdown
              advancedFilters.classList.add('max-h-0');
              advancedFilters.classList.remove('max-h-[500px]');
              advancedFilters.classList.add('py-0');
              advancedFilters.classList.remove('py-4');
              advancedFilters.classList.remove('opacity-100');
              advancedFilters.classList.add('opacity-0');
              
              // Remove body padding
              document.body.style.paddingTop = '0';
            }
          } else {
            // For regular version, use hidden class
            advancedFilters.classList.toggle('hidden');
          }
          
          filterIconDown?.classList.toggle('hidden');
          filterIconUp?.classList.toggle('hidden');
        });
        
        // Close dropdown when clicking outside
        document.addEventListener('click', (event) => {
          const target = event.target as Node;
          if (toggleFilters && advancedFilters && 
              !toggleFilters.contains(target) && 
              !advancedFilters.contains(target)) {
            
            if (suffix === '-header') {
              // For header version, use max-height transition
              advancedFilters.classList.add('max-h-0');
              advancedFilters.classList.remove('max-h-[500px]');
              advancedFilters.classList.add('py-0');
              advancedFilters.classList.remove('py-4');
              advancedFilters.classList.remove('opacity-100');
              advancedFilters.classList.add('opacity-0');
              
              // Remove body padding
              document.body.style.paddingTop = '0';
            } else {
              // For regular version, use hidden class
              advancedFilters.classList.add('hidden');
            }
            
            filterIconDown?.classList.remove('hidden');
            filterIconUp?.classList.add('hidden');
          }
        });
      }
      
      // Handle search button click
      if (searchButton && searchInput) {
        searchButton.addEventListener('click', (e) => {
          e.preventDefault();
          const query = searchInput.value.trim();
          if (query) {
            window.location.href = `/tools?search=${encodeURIComponent(query)}`;
          }
        });
        
        // Handle Enter key press
        searchInput.addEventListener('keypress', (e) => {
          if (e.key === 'Enter') {
            const query = searchInput.value.trim();
            if (query) {
              window.location.href = `/tools?search=${encodeURIComponent(query)}`;
            }
          }
        });
      }
      
      // Get URL parameters to set initial filter values
      const urlParams = new URLSearchParams(window.location.search);
      const searchParam = urlParams.get('search');
      const topicParam = urlParams.get('topic');
      
      if (searchParam && searchInput) {
        searchInput.value = searchParam;
      }
      
      if (topicParam) {
        const topicFilter = document.getElementById('topic-filter') as HTMLSelectElement;
        if (topicFilter) {
          Array.from(topicFilter.options).forEach((option: HTMLOptionElement) => {
            if (option.text === topicParam) {
              option.selected = true;
            }
          });
        }
      }
    });
  });
</script>
