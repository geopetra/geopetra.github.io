---
// Tool search and filter component
const { topics = [], operatingSystems = [], toolTypes = [], languages = [], initialSearchTerm = '' } = Astro.props;
---

<div class="mb-6 bg-gray-50 dark:bg-gray-800 rounded-lg overflow-hidden">
  <!-- Search bar - always visible -->
  <div class="p-4 border-b border-gray-200 dark:border-gray-700">
    <div class="flex gap-2">
      <div class="relative flex-grow">
        <input
          type="text"
          id="search"
          placeholder="Search by name, description..."
          value={initialSearchTerm}
          class="w-full px-4 py-2 pr-10 border border-gray-300 dark:border-gray-700 rounded-md focus:ring-blue-500 focus:border-blue-500 dark:bg-gray-700 dark:text-white"
        />
        <button 
          id="search-button"
          class="absolute right-2 top-1/2 transform -translate-y-1/2 text-gray-500 hover:text-gray-700 dark:text-gray-400 dark:hover:text-gray-200"
        >
          <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z" />
          </svg>
        </button>
      </div>
      <button
        id="toggle-filters"
        class="px-4 py-2 bg-blue-600 hover:bg-blue-700 text-white rounded-md transition-colors flex items-center"
      >
        <span>Filters</span>
        <svg id="filter-icon-down" xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 ml-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7" />
        </svg>
        <svg id="filter-icon-up" xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 ml-1 hidden" fill="none" viewBox="0 0 24 24" stroke="currentColor">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 15l7-7 7 7" />
        </svg>
      </button>
    </div>
  </div>
  
  <!-- Advanced filters - collapsible -->
  <div id="advanced-filters" class="p-4 hidden">
    <div class="grid grid-cols-1 md:grid-cols-3 gap-4 mb-4">
      <div>
        <label for="topic-filter" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">Topic</label>
        <select
          id="topic-filter"
          class="w-full px-4 py-2 border border-gray-300 dark:border-gray-700 rounded-md focus:ring-blue-500 focus:border-blue-500 dark:bg-gray-700 dark:text-white"
        >
          <option value="">All Topics</option>
          {topics.map((topic) => (
            <option value={topic.term}>{topic.term}</option>
          ))}
        </select>
      </div>
      
      <div>
        <label for="os-filter" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">Operating System</label>
        <select
          id="os-filter"
          class="w-full px-4 py-2 border border-gray-300 dark:border-gray-700 rounded-md focus:ring-blue-500 focus:border-blue-500 dark:bg-gray-700 dark:text-white"
        >
          <option value="">All Operating Systems</option>
          {operatingSystems.map((os) => (
            <option value={os.name}>{os.name}</option>
          ))}
        </select>
      </div>
      
      <div>
        <label for="type-filter" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">Tool Type</label>
        <select
          id="type-filter"
          class="w-full px-4 py-2 border border-gray-300 dark:border-gray-700 rounded-md focus:ring-blue-500 focus:border-blue-500 dark:bg-gray-700 dark:text-white"
        >
          <option value="">All Tool Types</option>
          {toolTypes.map((type) => (
            <option value={type.type}>{type.type}</option>
          ))}
        </select>
      </div>
    </div>
    
    <div class="grid grid-cols-1 md:grid-cols-2 gap-4 mb-4">
      <div>
        <label for="language-filter" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">Programming Language</label>
        <select
          id="language-filter"
          class="w-full px-4 py-2 border border-gray-300 dark:border-gray-700 rounded-md focus:ring-blue-500 focus:border-blue-500 dark:bg-gray-700 dark:text-white"
        >
          <option value="">All Languages</option>
          {languages.map((lang) => (
            <option value={lang.name}>{lang.name}</option>
          ))}
        </select>
      </div>
      
      <div>
        <label for="accessibility-filter" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">Accessibility</label>
        <select
          id="accessibility-filter"
          class="w-full px-4 py-2 border border-gray-300 dark:border-gray-700 rounded-md focus:ring-blue-500 focus:border-blue-500 dark:bg-gray-700 dark:text-white"
        >
          <option value="">All Accessibility</option>
          <option value="Open Source">Open Source</option>
          <option value="Free">Free</option>
          <option value="Commercial">Commercial</option>
        </select>
      </div>
    </div>
    
    <div class="text-right">
      <button
        id="reset-filters"
        class="px-4 py-2 bg-gray-200 hover:bg-gray-300 dark:bg-gray-700 dark:hover:bg-gray-600 text-gray-800 dark:text-gray-200 rounded-md transition-colors"
      >
        Reset Filters
      </button>
    </div>
  </div>
</div>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    const toggleFilters = document.getElementById('toggle-filters');
    const advancedFilters = document.getElementById('advanced-filters');
    const filterIconDown = document.getElementById('filter-icon-down');
    const filterIconUp = document.getElementById('filter-icon-up');
    const searchInput = document.getElementById('search');
    const searchButton = document.getElementById('search-button');
    
    // Toggle advanced filters visibility
    if (toggleFilters && advancedFilters) {
      toggleFilters.addEventListener('click', () => {
        advancedFilters.classList.toggle('hidden');
        filterIconDown.classList.toggle('hidden');
        filterIconUp.classList.toggle('hidden');
      });
    }
    
    // Handle search button click
    if (searchButton && searchInput) {
      searchButton.addEventListener('click', (e) => {
        e.preventDefault();
        // Trigger the input event on the search input to filter results
        searchInput.dispatchEvent(new Event('input'));
      });
    }
    
    // Get URL parameters to set initial filter values
    const urlParams = new URLSearchParams(window.location.search);
    const searchParam = urlParams.get('search');
    const topicParam = urlParams.get('topic');
    
    if (searchParam && searchInput) {
      searchInput.value = searchParam;
    }
    
    if (topicParam) {
      const topicFilter = document.getElementById('topic-filter');
      if (topicFilter) {
        // Find the option with matching text
        Array.from(topicFilter.options).forEach(option => {
          if (option.text === topicParam) {
            option.selected = true;
          }
        });
      }
    }
  });
</script>
