---
// Tool search and / component
const { 
  topics = [], 
  operatingSystems = [], 
  toolTypes = [], 
  languages = [], 
  initialSearchTerm = '',
  compactMode = false 
} = Astro.props;
---

<div class={`${compactMode ? 'relative' : 'mb-6 bg-gray-50 dark:bg-gray-800 rounded-lg'} overflow-visible`}>
  <!-- Search bar - always visible -->
  <div class={`${compactMode ? 'p-0' : 'p-4 border-b border-gray-200 dark:border-gray-700'}`}>
    <div class="flex gap-2">
      <div class="relative flex-grow">
        <input
          type="text"
          id={`search${compactMode ? '-header' : ''}`}
          placeholder="Search by name, description..."
          value={initialSearchTerm}
          class="w-full px-4 py-2 pr-10 border border-gray-300 dark:border-gray-700 rounded-md focus:ring-blue-500 focus:border-blue-500 dark:bg-gray-700 dark:text-white"
        />
        <button 
          id={`search-button${compactMode ? '-header' : ''}`}
          type="button"
          class="absolute right-2 top-1/2 transform -translate-y-1/2 text-gray-500 hover:text-gray-700 dark:text-gray-400 dark:hover:text-gray-200"
          aria-label="Search"
        >
          <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z" />
          </svg>
        </button>
      </div>
      <button
        id={`toggle-filters${compactMode ? '-header' : ''}`}
        type="button"
        class="px-4 py-2 bg-blue-600 hover:bg-blue-700 text-white rounded-md transition-colors flex items-center"
        aria-expanded="false"
        aria-controls={`advanced-filters${compactMode ? '-header' : ''}`}
      >
        <span>Filters</span>
        <svg id={`filter-icon-down${compactMode ? '-header' : ''}`} xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 ml-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7" />
        </svg>
        <svg id={`filter-icon-up${compactMode ? '-header' : ''}`} xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 ml-1 hidden" fill="none" viewBox="0 0 24 24" stroke="currentColor">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 15l7-7 7 7" />
        </svg>
      </button>
    </div>
  </div>
  
  <!-- Advanced filters - collapsible -->
  <div id={`advanced-filters${compactMode ? '-header' : ''}`} class={`${compactMode ? 'w-full bg-white dark:bg-gray-800 shadow-md z-[100] border-t border-gray-200 dark:border-gray-700 transition-all duration-300 overflow-hidden' : ''} p-4 ${compactMode ? 'max-h-0 py-0 opacity-0' : 'hidden'}`}>
    <div class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-5 gap-3 mb-3 max-w-7xl mx-auto px-2">
      <div>
        <label for="topic-filter" class="block text-xs font-medium text-gray-700 dark:text-gray-300 mb-1">Topic</label>
        <select
          id="topic-filter"
          class="w-full px-2 py-1 text-sm border border-gray-300 dark:border-gray-700 rounded-md focus:ring-blue-500 focus:border-blue-500 dark:bg-gray-700 dark:text-white"
        >
          <option value="">All Topics</option>
          {topics.map((topic: { term: string }) => (
            <option value={topic.term}>{topic.term}</option>
          ))}
        </select>
      </div>
      
      <div>
        <label for="os-filter" class="block text-xs font-medium text-gray-700 dark:text-gray-300 mb-1">Operating System</label>
        <select
          id="os-filter"
          class="w-full px-2 py-1 text-sm border border-gray-300 dark:border-gray-700 rounded-md focus:ring-blue-500 focus:border-blue-500 dark:bg-gray-700 dark:text-white"
        >
          <option value="">All Operating Systems</option>
          {operatingSystems.map((os: { name: string }) => (
            <option value={os.name}>{os.name}</option>
          ))}
        </select>
      </div>
      
      <div>
        <label for="type-filter" class="block text-xs font-medium text-gray-700 dark:text-gray-300 mb-1">Tool Type</label>
        <select
          id="type-filter"
          class="w-full px-2 py-1 text-sm border border-gray-300 dark:border-gray-700 rounded-md focus:ring-blue-500 focus:border-blue-500 dark:bg-gray-700 dark:text-white"
        >
          <option value="">All Tool Types</option>
          {toolTypes.map((type: { type: string }) => (
            <option value={type.type}>{type.type}</option>
          ))}
        </select>
      </div>
      
      <div>
        <label for="language-filter" class="block text-xs font-medium text-gray-700 dark:text-gray-300 mb-1">Language</label>
        <select
          id="language-filter"
          class="w-full px-2 py-1 text-sm border border-gray-300 dark:border-gray-700 rounded-md focus:ring-blue-500 focus:border-blue-500 dark:bg-gray-700 dark:text-white"
        >
          <option value="">All Languages</option>
          {languages.map((lang: { name: string }) => (
            <option value={lang.name}>{lang.name}</option>
          ))}
        </select>
      </div>
      
      <div>
        <label for="accessibility-filter" class="block text-xs font-medium text-gray-700 dark:text-gray-300 mb-1">Accessibility</label>
        <select
          id="accessibility-filter"
          class="w-full px-2 py-1 text-sm border border-gray-300 dark:border-gray-700 rounded-md focus:ring-blue-500 focus:border-blue-500 dark:bg-gray-700 dark:text-white"
        >
          <option value="">All Accessibility</option>
          <option value="Open Source">Open Source</option>
          <option value="Free">Free</option>
          <option value="Commercial">Commercial</option>
        </select>
      </div>
    </div>
    
    <div class="flex justify-end max-w-7xl mx-auto px-2">
      <button
        id="reset-filters"
        type="button"
        class="px-3 py-1 text-sm bg-gray-200 hover:bg-gray-300 dark:bg-gray-700 dark:hover:bg-gray-600 text-gray-800 dark:text-gray-200 rounded-md transition-colors"
      >
        Reset Filters
      </button>
    </div>
  </div>
</div>

<script is:inline>
  // Execute immediately without waiting for DOMContentLoaded
  (function() {
    function initializeToolSearch() {
      // Handle both regular and header versions
      ['', '-header'].forEach(suffix => {
        const toggleFilters = document.getElementById(`toggle-filters${suffix}`);
        const advancedFilters = document.getElementById(`advanced-filters${suffix}`);
        const filterIconDown = document.getElementById(`filter-icon-down${suffix}`);
        const filterIconUp = document.getElementById(`filter-icon-up${suffix}`);
        const searchInput = document.getElementById(`search${suffix}`);
        const searchButton = document.getElementById(`search-button${suffix}`);
        
        // Toggle advanced filters visibility
        if (toggleFilters && advancedFilters) {
          toggleFilters.addEventListener('click', function(e) {
            e.stopPropagation();
            
            if (suffix === '-header') {
              // For header version, use max-height transition
              if (advancedFilters.classList.contains('max-h-0')) {
                // Open the dropdown
                advancedFilters.classList.remove('max-h-0');
                advancedFilters.classList.add('max-h-[300px]');
                advancedFilters.classList.remove('py-0');
                advancedFilters.classList.add('py-4');
                advancedFilters.classList.remove('opacity-0');
                advancedFilters.classList.add('opacity-100');
                toggleFilters.setAttribute('aria-expanded', 'true');
                
                // Force a reflow to ensure the transition works
                void advancedFilters.offsetHeight;
              } else {
                // Close the dropdown
                advancedFilters.classList.add('max-h-0');
                advancedFilters.classList.remove('max-h-[300px]');
                advancedFilters.classList.add('py-0');
                advancedFilters.classList.remove('py-4');
                advancedFilters.classList.remove('opacity-100');
                advancedFilters.classList.add('opacity-0');
                toggleFilters.setAttribute('aria-expanded', 'false');
              }
            } else {
              // For regular version, use hidden class
              const isHidden = advancedFilters.classList.contains('hidden');
              advancedFilters.classList.toggle('hidden');
              toggleFilters.setAttribute('aria-expanded', isHidden ? 'true' : 'false');
            }
            
            if (filterIconDown) filterIconDown.classList.toggle('hidden');
            if (filterIconUp) filterIconUp.classList.toggle('hidden');
          });
          
          // Close dropdown when clicking outside
          document.addEventListener('click', function(event) {
            const target = event.target;
            if (toggleFilters && advancedFilters && 
                !toggleFilters.contains(target) && 
                !advancedFilters.contains(target)) {
              
              if (suffix === '-header') {
                // For header version, use max-height transition
                advancedFilters.classList.add('max-h-0');
                advancedFilters.classList.remove('max-h-[300px]');
                advancedFilters.classList.add('py-0');
                advancedFilters.classList.remove('py-4');
                advancedFilters.classList.remove('opacity-100');
                advancedFilters.classList.add('opacity-0');
                toggleFilters.setAttribute('aria-expanded', 'false');
              } else {
                // For regular version, use hidden class
                advancedFilters.classList.add('hidden');
                toggleFilters.setAttribute('aria-expanded', 'false');
              }
              
              if (filterIconDown) filterIconDown.classList.remove('hidden');
              if (filterIconUp) filterIconUp.classList.add('hidden');
            }
          });
        }
        
        // Handle search button click
        if (searchButton && searchInput) {
          searchButton.addEventListener('click', function(e) {
            e.preventDefault();
            const query = searchInput.value.trim();
            if (query) {
              window.location.href = `/tools?search=${encodeURIComponent(query)}`;
            }
          });
          
          // Handle Enter key press
          searchInput.addEventListener('keypress', function(e) {
            if (e.key === 'Enter') {
              const query = searchInput.value.trim();
              if (query) {
                window.location.href = `/tools?search=${encodeURIComponent(query)}`;
              }
            }
          });
        }
        
        // Get URL parameters to set initial filter values
        const urlParams = new URLSearchParams(window.location.search);
        const searchParam = urlParams.get('search');
        const topicParam = urlParams.get('topic');
        
        if (searchParam && searchInput) {
          searchInput.value = searchParam;
        }
        
        if (topicParam) {
          const topicFilter = document.getElementById('topic-filter');
          if (topicFilter) {
            Array.from(topicFilter.options).forEach(function(option) {
              if (option.text === topicParam) {
                option.selected = true;
              }
            });
          }
        }
      });
      
      // Initialize reset filters button
      const resetFilters = document.getElementById('reset-filters');
      if (resetFilters) {
        resetFilters.addEventListener('click', function() {
          const filterElements = document.querySelectorAll('select[id$="-filter"]');
          filterElements.forEach(function(element) {
            if (element instanceof HTMLSelectElement) {
              element.selectedIndex = 0;
            }
          });
          
          const searchInputs = document.querySelectorAll('input[id^="search"]');
          searchInputs.forEach(function(input) {
            if (input instanceof HTMLInputElement) {
              input.value = '';
            }
          });
          
          // Trigger any filter change events if needed
          const event = new Event('change');
          filterElements.forEach(function(element) {
            element.dispatchEvent(event);
          });
        });
      }
    }

    // Try to initialize immediately
    initializeToolSearch();
    
    // Also initialize on DOMContentLoaded as a fallback
    document.addEventListener('DOMContentLoaded', initializeToolSearch);
  })();
</script>
