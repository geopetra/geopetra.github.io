---
export interface Props {
  classes?: Record<string, string>;
}

const { classes = {} } = Astro.props;
---

<div class:list={["filters-container", classes?.container]}>
  <button 
    id="filter-button"
    class="px-4 py-2 bg-blue-100 hover:bg-blue-200 dark:bg-blue-800 dark:hover:bg-blue-700 rounded-lg flex items-center text-sm font-medium transition-colors"
  >
    <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 4a1 1 0 011-1h16a1 1 0 011 1v2.586a1 1 0 01-.293.707l-6.414 6.414a1 1 0 00-.293.707V17l-4 4v-6.586a1 1 0 00-.293-.707L3.293 7.293A1 1 0 013 6.586V4z" />
    </svg>
    Filters
  </button>
  
  <div id="filters-dropdown" class="hidden absolute right-0 mt-2 p-4 bg-white dark:bg-gray-800 rounded-lg shadow-lg z-50 w-72">
    <h3 class="font-bold mb-3 text-gray-700 dark:text-gray-300">Filter by Category</h3>
    <div class="space-y-2 max-h-40 overflow-y-auto">
      <div class="flex items-center">
        <input id="filter-geochemical" type="checkbox" class="h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded">
        <label for="filter-geochemical" class="ml-2 text-sm text-gray-700 dark:text-gray-300">Geochemical Analysis</label>
      </div>
      <div class="flex items-center">
        <input id="filter-phase" type="checkbox" class="h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded">
        <label for="filter-phase" class="ml-2 text-sm text-gray-700 dark:text-gray-300">Phase Equilibria</label>
      </div>
      <div class="flex items-center">
        <input id="filter-mineral" type="checkbox" class="h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded">
        <label for="filter-mineral" class="ml-2 text-sm text-gray-700 dark:text-gray-300">Mineral Identification</label>
      </div>
      <div class="flex items-center">
        <input id="filter-visualization" type="checkbox" class="h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded">
        <label for="filter-visualization" class="ml-2 text-sm text-gray-700 dark:text-gray-300">Visualization</label>
      </div>
      <div class="flex items-center">
        <input id="filter-thermodynamics" type="checkbox" class="h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded">
        <label for="filter-thermodynamics" class="ml-2 text-sm text-gray-700 dark:text-gray-300">Thermodynamics</label>
      </div>
      <div class="flex items-center">
        <input id="filter-data" type="checkbox" class="h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded">
        <label for="filter-data" class="ml-2 text-sm text-gray-700 dark:text-gray-300">Data Processing</label>
      </div>
      <div class="flex items-center">
        <input id="filter-education" type="checkbox" class="h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded">
        <label for="filter-education" class="ml-2 text-sm text-gray-700 dark:text-gray-300">Educational Resources</label>
      </div>
      <div class="flex items-center">
        <input id="filter-field" type="checkbox" class="h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded">
        <label for="filter-field" class="ml-2 text-sm text-gray-700 dark:text-gray-300">Field Tools</label>
      </div>
    </div>
    
    <h3 class="font-bold mt-4 mb-3 text-gray-700 dark:text-gray-300">Filter by Platform</h3>
    <div class="space-y-2">
      <div class="flex items-center">
        <input id="filter-windows" type="checkbox" class="h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded">
        <label for="filter-windows" class="ml-2 text-sm text-gray-700 dark:text-gray-300">Windows</label>
      </div>
      <div class="flex items-center">
        <input id="filter-macos" type="checkbox" class="h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded">
        <label for="filter-macos" class="ml-2 text-sm text-gray-700 dark:text-gray-300">macOS</label>
      </div>
      <div class="flex items-center">
        <input id="filter-linux" type="checkbox" class="h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded">
        <label for="filter-linux" class="ml-2 text-sm text-gray-700 dark:text-gray-300">Linux</label>
      </div>
      <div class="flex items-center">
        <input id="filter-web" type="checkbox" class="h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded">
        <label for="filter-web" class="ml-2 text-sm text-gray-700 dark:text-gray-300">Web</label>
      </div>
    </div>
    
    <h3 class="font-bold mt-4 mb-3 text-gray-700 dark:text-gray-300">Filter by Accessibility</h3>
    <div class="space-y-2">
      <div class="flex items-center">
        <input id="filter-open-source" type="checkbox" class="h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded">
        <label for="filter-open-source" class="ml-2 text-sm text-gray-700 dark:text-gray-300">Open Source</label>
      </div>
      <div class="flex items-center">
        <input id="filter-free" type="checkbox" class="h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded">
        <label for="filter-free" class="ml-2 text-sm text-gray-700 dark:text-gray-300">Free</label>
      </div>
      <div class="flex items-center">
        <input id="filter-paid" type="checkbox" class="h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded">
        <label for="filter-paid" class="ml-2 text-sm text-gray-700 dark:text-gray-300">Paid</label>
      </div>
    </div>
    
    <div class="mt-4 flex justify-between">
      <button id="clear-filters" class="text-sm text-blue-600 hover:text-blue-800 dark:text-blue-400 dark:hover:text-blue-300">
        Clear all
      </button>
      <button id="apply-filters" class="px-3 py-1 bg-blue-600 hover:bg-blue-700 text-white text-sm rounded">
        Apply
      </button>
    </div>
  </div>
</div>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    const filterButton = document.getElementById('filter-button');
    const filtersDropdown = document.getElementById('filters-dropdown');
    const clearFiltersButton = document.getElementById('clear-filters');
    const applyFiltersButton = document.getElementById('apply-filters');
    
    // Toggle filters dropdown
    filterButton?.addEventListener('click', (e) => {
      e.stopPropagation();
      filtersDropdown?.classList.toggle('hidden');
    });
    
    // Close dropdown when clicking outside
    document.addEventListener('click', (event) => {
      if (filterButton && filtersDropdown && !filterButton.contains(event.target) && !filtersDropdown.contains(event.target)) {
        filtersDropdown.classList.add('hidden');
      }
    });
    
    // Clear all filters
    clearFiltersButton?.addEventListener('click', () => {
      if (!filtersDropdown) return;
      const checkboxes = filtersDropdown.querySelectorAll('input[type="checkbox"]');
      checkboxes.forEach(checkbox => {
        checkbox.checked = false;
      });
    });
    
    // Apply filters
    applyFiltersButton?.addEventListener('click', () => {
      const urlParams = new URLSearchParams(window.location.search);
      
      // Preserve search term if it exists
      const searchTerm = urlParams.get('search');
      urlParams.delete('search');
      if (searchTerm) {
        urlParams.set('search', searchTerm);
      }
      
      // Get selected categories
      const categories = [];
      document.querySelectorAll('[id^="filter-geochemical"], [id^="filter-phase"], [id^="filter-mineral"], [id^="filter-visualization"], [id^="filter-thermodynamics"], [id^="filter-data"], [id^="filter-education"], [id^="filter-field"]').forEach(checkbox => {
        if (checkbox.checked) {
          categories.push(checkbox.id.replace('filter-', ''));
        }
      });
      
      // Get selected platforms
      const platforms = [];
      document.querySelectorAll('[id^="filter-windows"], [id^="filter-macos"], [id^="filter-linux"], [id^="filter-web"]').forEach(checkbox => {
        if (checkbox.checked) {
          platforms.push(checkbox.id.replace('filter-', ''));
        }
      });
      
      // Get selected accessibility options
      const accessibility = [];
      document.querySelectorAll('[id^="filter-open-source"], [id^="filter-free"], [id^="filter-paid"]').forEach(checkbox => {
        if (checkbox.checked) {
          accessibility.push(checkbox.id.replace('filter-', ''));
        }
      });
      
      // Update URL parameters
      if (categories.length > 0) {
        urlParams.set('categories', categories.join(','));
      } else {
        urlParams.delete('categories');
      }
      
      if (platforms.length > 0) {
        urlParams.set('platforms', platforms.join(','));
      } else {
        urlParams.delete('platforms');
      }
      
      if (accessibility.length > 0) {
        urlParams.set('accessibility', accessibility.join(','));
      } else {
        urlParams.delete('accessibility');
      }
      
      // Redirect to filtered results
      window.location.href = `${window.location.pathname}?${urlParams.toString()}`;
    });
    
    // Initialize filters from URL parameters
    const urlParams = new URLSearchParams(window.location.search);
    
    if (urlParams.has('categories')) {
      const categories = urlParams.get('categories').split(',');
      categories.forEach(category => {
        const checkbox = document.getElementById(`filter-${category}`);
        if (checkbox) checkbox.checked = true;
      });
    }
    
    if (urlParams.has('platforms')) {
      const platforms = urlParams.get('platforms').split(',');
      platforms.forEach(platform => {
        const checkbox = document.getElementById(`filter-${platform}`);
        if (checkbox) checkbox.checked = true;
      });
    }
    
    if (urlParams.has('accessibility')) {
      const accessibility = urlParams.get('accessibility').split(',');
      accessibility.forEach(option => {
        const checkbox = document.getElementById(`filter-${option}`);
        if (checkbox) checkbox.checked = true;
      });
    }
    
    // Update filter button to show active state if any filters are applied
    const hasActiveFilters = urlParams.has('categories') || urlParams.has('platforms') || urlParams.has('accessibility');
    if (hasActiveFilters && filterButton) {
      filterButton.classList.add('bg-blue-200', 'dark:bg-blue-700');
      filterButton.classList.remove('bg-blue-100', 'dark:bg-blue-800');
      
      // Add a small indicator badge
      const badge = document.createElement('span');
      badge.className = 'ml-1 px-1.5 py-0.5 text-xs bg-blue-500 text-white rounded-full';
      
      const totalFilters = 
        (urlParams.has('categories') ? urlParams.get('categories').split(',').length : 0) +
        (urlParams.has('platforms') ? urlParams.get('platforms').split(',').length : 0) +
        (urlParams.has('accessibility') ? urlParams.get('accessibility').split(',').length : 0);
      
      badge.textContent = totalFilters.toString();
      filterButton.appendChild(badge);
    }
  });
</script>
